// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  player        Player?
  isAdmin       Boolean   @default(false)
}

model Player {
  id         String       @id @default(cuid())
  name       String
  uniqueName String       @unique
  user       User?        @relation(fields: [userId], references: [id])
  userId     String?      @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  races      PlayerRace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model League {
  id     String   @id @default(cuid())
  name   String  @unique
  Season Season[]
}

model Season {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime?
  League    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  events    Event[]
}

model Event {
  id        String  @id @default(cuid())
  name      String
  shortName String
  order     Int
  races     Race[]
  Season    Season? @relation(fields: [seasonId], references: [id])
  seasonId  String?
}

model Race {
  id         String       @id @default(cuid())
  map        String
  laps       Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  PlayerRace PlayerRace[]
  event      Event        @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId    String
}

model PlayerRace {
  id         String   @id @default(cuid())
  player     Player   @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  race       Race     @relation(fields: [raceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playerId   String
  raceId     String
  position   Int
  gap        String?
  interval   String?
  averageLap String
  points     Int
  car        String
  time       String
  bestLap    String
  finished   Boolean
  cheating   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([playerId, raceId])
  @@unique([raceId, position])
}
